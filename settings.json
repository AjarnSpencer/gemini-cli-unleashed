{
  "theme": "Default",
  "selectedAuthType": "oauth-personal"
}
{
  "general": {
    "preferredEditor": "gnome-text-editor",
    "vimMode": true,
    "disableAutoUpdate": true
  },
  "tools": {
    "sandbox": "none",
    "allowed": [
      "list_directory",
      "read_file",
      "search_file_content",
      "glob",
      "replace",
      "web_fetch",
      "read_many_files",
      "run_shell_command",
      "save_memory",
      "google_web_search",
      "run_shell_command(npm run dev)",
      "run_shell_command(npm run lint)",
      "run_shell_command(npm run build)",
      "run_shell_command(pip install -r requirements.txt)",{
  "general": {
    "preferredEditor": "gnome-text-editor",
    "vimMode": true,
    "disableAutoUpdate": true
  },
  "tools": {
    "sandbox": "none",
    "allowed": [
      "list_directory",
      "read_file",
      "search_file_content",
      "glob",
      "replace",
      "web_fetch",
      "read_many_files",
      "run_shell_command",
      "save_memory",
      "google_web_search",
      "run_shell_command(npm run dev)",
      "run_shell_command(npm run lint)",
      "run_shell_command(npm run build)",
      "run_shell_command(pip install -r requirements.txt)",
      "run_shell_command(pytest)",
      "run_shell_command(python -m venv venv)",
      "run_shell_command(pip list)",
      "run_shell_command(black .)",
      "run_shell_command(npm install)",
      "run_shell_command(npm test)",
      "run_shell_command(npm start)",
      "run_shell_command(npm run dev)",
      "run_shell_command(go test ./...)",
      "run_shell_command(go run .)",
      "run_shell_command(go build)",
      "run_shell_command(go fmt)",
      "run_shell_command(npm run eject)",
      "run_shell_command(composer install)",
      "run_shell_command(php -S localhost:8000)",
      "run_shell_command(composer update)",
      "run_shell_command(phpunit)",
      "run_shell_command(mysql -u root -p)",
      "run_shell_command(mysqldump -u root -p)",
      "run_shell_command(mysql -e \"CREATE DATABASE mydatabase;\")",
      "run_shell_command(mysql --version)",
      "run_shell_command(docker build -t myapp .)",
      "run_shell_command(docker run -p 3000:3000 myapp)",
      "run_shell_command(docker-compose up)",
      "run_shell_command(docker ps)",
      "run_shell_command(docker logs)",
      "run_shell_command(docker exec -it container_name sh)",
      "run_shell_command(kubectl get pods)",
      "run_shell_command(kubectl apply -f deployment.yaml)",
      "run_shell_command(kubectl logs pod_name)",
      "run_shell_command(kubectl exec -it pod_name -- sh)",
      "run_shell_command(git status)",
      "run_shell_command(git add .)",
      "run_shell_command(git commit -m \"Automated commit\")",
      "run_shell_command(git push origin main)",
      "run_shell_command(git pull origin main)",
      "run_shell_command(git diff)",
      "run_shell_command(git log --oneline)",
      "run_shell_command(terraform init)",
      "run_shell_command(terraform plan)",
      "run_shell_command(terraform apply)",
      "run_shell_command(terraform destroy)",
      "run_shell_command(ansible-playbook playbook.yml)",
      "run_shell_command(aws s3 ls)",
      "run_shell_command(aws ec2 describe-instances)",
      "run_shell_command(az group list)",
      "run_shell_command(gcloud compute instances list)",
      "run_shell_command(make build)",
      "run_shell_command(make test)",
      "run_shell_command(make clean)",
      "run_shell_command(cargo build)",
      "run_shell_command(cargo run)",
      "run_shell_command(cargo test)",
      "run_shell_command(rustc --version)",
      "run_shell_command(java -jar app.jar)",
      "run_shell_command(mvn clean install)",
      "run_shell_command(gradle build)",
      "run_shell_command(sbt run)",
      "run_shell_command(ruby script.rb)",
      "run_shell_command(bundle install)",
      "run_shell_command(rails server)",
      "run_shell_command(rails console)",
      "run_shell_command(webpack --mode development)",
      "run_shell_command(webpack --mode production)",
      "run_shell_command(eslint src/)",
      "run_shell_command(prettier --write src/)",
      "run_shell_command(yarn install)",
      "run_shell_command(yarn build)",
      "run_shell_command(yarn test)",
      "run_shell_command(systemctl status service_name)",
      "run_shell_command(journalctl -u service_name)",
      "run_shell_command(ps aux | grep process_name)",
      "run_shell_command(kill process_id)",
      "run_shell_command(netstat -tulpn)",
      "run_shell_command(ss -tulpn)",
      "run_shell_command(lsof -i :port)",
      "run_shell_command(tail -f /var/log/syslog)",
      "run_shell_command(find /path -name \"*.ext\" -type f)",
      "run_shell_command(grep -r \"pattern\" /path)",
      "run_shell_command(tar -czvf archive.tar.gz folder/)",
      "run_shell_command(unzip archive.zip)",
      "run_shell_command(wget url)",
      "run_shell_command(curl -X GET url)",
      "run_shell_command(crontab -l)",
      "run_shell_command(systemctl start service_name)",
      "run_shell_command(systemctl stop service_name)",
      "run_shell_command(systemctl restart service_name)",  
      "run_shell_command(rm -rf node_modules && npm install)",
      "run_shell_command(npm audit fix)",
  "run_shell_command(npm outdated)",
  "run_shell_command(npm update)",
  "run_shell_command(npx create-react-app my-app)",
  "run_shell_command(npx vue create my-project)",
  "run_shell_command(ng new my-angular-app)",
  "run_shell_command(dotnet new console -o MyApp)",
  "run_shell_command(dotnet run)",
  "run_shell_command(dotnet build)",
  "run_shell_command(dotnet test)",
  "run_shell_command(pip install package_name)",
  "run_shell_command(pip uninstall package_name)",
  "run_shell_command(pip freeze > requirements.txt)",
  "run_shell_command(conda create -n myenv python=3.9)",
  "run_shell_command(conda activate myenv)",
  "run_shell_command(conda install package_name)",
  "run_shell_command(virtualenv venv)",
  "run_shell_command(source venv/bin/activate)",
  "run_shell_command( deactivate)",
  "run_shell_command(flask run)",
  "run_shell_command(django-admin startproject mysite)",
  "run_shell_command(python manage.py runserver)",
  "run_shell_command(python manage.py makemigrations)",
  "run_shell_command(python manage.py migrate)",
  "run_shell_command(ruby -v)",
  "run_shell_command(gem install package_name)",
  "run_shell_command(rails new myapp)",
  "run_shell_command(rake db:migrate)",
  "run_shell_command(rake db:seed)",
  "run_shell_command(spring boot run)",
  "run_shell_command(mvn spring-boot:run)",
  "run_shell_command(gradle bootRun)",
  "run_shell_command(javac filename.java)",
  "run_shell_command(java classname)",
  "run_shell_command(jar -cvf myapp.jar *)",
  "run_shell_command(ant build)",
  "run_shell_command(ant clean)",
  "run_shell_command(ionic start myApp)",
  "run_shell_command(ionic serve)",
  "run_shell_command(ionic build)",
  "run_shell_command(cordova platform add android)",
  "run_shell_command(cordova build android)",
  "run_shell_command(react-native init MyApp)",
  "run_shell_command(react-native run-android)",
  "run_shell_command(react-native run-ios)",
  "run_shell_command(expo start)",
  "run_shell_command(expo build:android)",
  "run_shell_command(expo build:ios)",
  "run_shell_command(docker-compose down)",
  "run_shell_command(docker-compose build)",
  "run_shell_command(docker-compose logs)",
  "run_shell_command(docker images)",
  "run_shell_command(docker rmi image_name)",
  "run_shell_command(docker stop container_name)",
  "run_shell_command(docker rm container_name)",
  "run_shell_command(docker volume ls)",
  "run_shell_command(docker network ls)",
  "run_shell_command(kubectl delete pod pod_name)",
  "run_shell_command(kubectl scale deployment deployment_name --replicas=3)",
  "run_shell_command(kubectl port-forward pod_name 8080:80)",
  "run_shell_command(kubectl describe pod pod_name)",
  "run_shell_command(kubectl create -f file.yaml)",
  "run_shell_command(helm install release_name chart_name)",
  "run_shell_command(helm list)",
  "run_shell_command(helm uninstall release_name)",
  "run_shell_command(terraform validate)",
  "run_shell_command(terraform fmt)",
  "run_shell_command(terraform show)",
  "run_shell_command(terraform output)",
  "run_shell_command(ansible --version)",
  "run_shell_command(ansible-inventory --list)",
  "run_shell_command(aws configure)",
  "run_shell_command(aws sts get-caller-identity)",
  "run_shell_command(az login)",
  "run_shell_command(az account show)",
  "run_shell_command(gcloud auth login)",
  "run_shell_command(gcloud config list)",
  "run_shell_command(serverless deploy)",
  "run_shell_command(serverless remove)",
  "run_shell_command(serverless logs -f function_name)",
  "run_shell_command(pm2 start app.js)",
  "run_shell_command(pm2 list)",
  "run_shell_command(pm2 stop app_name)",
  "run_shell_command(pm2 restart app_name)",
  "run_shell_command(pm2 delete app_name)",
  "run_shell_command(nodemon app.js)",
  "run_shell_command(forever start app.js)",
  "run_shell_command(forever list)",
  "run_shell_command(forever stop app_name)",
  "run_shell_command(sudo systemctl enable service_name)",
  "run_shell_command(sudo systemctl disable service_name)",
  "run_shell_command(sudo journalctl -f -u service_name)",
  "run_shell_command(sudo ufw status)",
  "run_shell_command(sudo ufw allow port)",
  "run_shell_command(sudo ufw deny port)",
  "run_shell_command(crontab -e)",
  "run_shell_command(crontab -r)",
  "run_shell_command(at now + 5 minutes)",
  "run_shell_command(atq)",
  "run_shell_command(atrm job_number)",
  "run_shell_command(wget --mirror --convert-links --adjust-extension --page-requisites --no-parent url)",
  "run_shell_command(curl -X POST -H \"Content-Type: application/json\" -d '{\"key\":\"value\"}' url)",
  "run_shell_command(curl -O url)",
  "run_shell_command(rsync -av source/ destination/)",
  "run_shell_command(scp file user@host:/path)",
  "run_shell_command(ssh user@host)",
  "run_shell_command(ssh-keygen -t rsa -b 4096)",
  "run_shell_command(ssh-copy-id user@host)",
  "run_shell_command(telnet host port)",
  "run_shell_command(nc -zv host port)",
  "run_shell_command(dig domain.com)",
  "run_shell_command(nslookup domain.com)",
  "run_shell_command(traceroute domain.com)",
  "run_shell_command(ping -c 4 domain.com)",
  "run_shell_command(ifconfig)",
  "run_shell_command(ip addr show)",
  "run_shell_command(route -n)",
  "run_shell_command(iptables -L)",
  "run_shell_command(iptables -A INPUT -p tcp --dport port -j ACCEPT)",
  "run_shell_command(iptables -D INPUT -p tcp --dport port -j ACCEPT)",
  "run_shell_command(useradd username)",
  "run_shell_command(userdel username)",
  "run_shell_command(usermod -aG group username)",
  "run_shell_command(passwd username)",
  "run_shell_command(groups username)",
  "run_shell_command(id username)",
  "run_shell_command(chmod 755 filename)",
  "run_shell_command(chown user:group filename)",
  "run_shell_command(du -sh directory)",
  "run_shell_command(df -h)",
  "run_shell_command(free -h)",
  "run_shell_command(top)",
  "run_shell_command(htop)",
  "run_shell_command(vmstat 1)",
  "run_shell_command(iostat)",
  "run_shell_command(mpstat)",
  "run_shell_command(sar -u)",
  "run_shell_command(iotop)",
  "run_shell_command(nethogs)",
  "run_shell_command(nload)",
  "run_shell_command(tcpdump -i interface)",
  "run_shell_command(tshark -i interface)",
  "run_shell_command(wireshark)",
  "run_shell_command(nmap -sT target)",
  "run_shell_command(nmap -sU target)",
  "run_shell_command(nmap -O target)",
  "run_shell_command(nmap -A target)",
  "run_shell_command(netcat -l -p port)",
  "run_shell_command(netcat target port)",
  "run_shell_command(socat TCP-LISTEN:port,fork TCP:target:port)",
  "run_shell_command(socat UDP-LISTEN:port,fork UDP:target:port)",
  "run_shell_command(mount /dev/device /mnt/mountpoint)",
  "run_shell_command(umount /mnt/mountpoint)",
  "run_shell_command(fdisk -l)",
  "run_shell_command(lsblk)",
  "run_shell_command(lscpu)",
  "run_shell_command(lsmem)",
  "run_shell_command(lsusb)",
  "run_shell_command(lspci)",
  "run_shell_command(dmidecode)",
  "run_shell_command(hwinfo)",
  "run_shell_command(sensors)",
  "run_shell_command(lsmod)",
  "run_shell_command(modprobe module_name)",
  "run_shell_command(rmmod module_name)",
  "run_shell_command(dmesg)",
  "run_shell_command(journalctl --since today)",
  "run_shell_command(journalctl --since \"2023-01-01\" --until \"2023-01-02\")",
  "run_shell_command(logrotate /etc/logrotate.conf)",
  "run_shell_command(logger \"Test message\")",
  "run_shell_command(logger -p local0.notice \"Test message\")",
  "run_shell_command(syslog-ng)",
  "run_shell_command(rsyslogd)",
  "run_shell_command(cron)",
  "run_shell_command(anacron)",
  "run_shell_command(atd)",
  "run_shell_command(nginx -t)",
  "run_shell_command(apache2ctl configtest)",
  "run_shell_command(apache2ctl start)",
  "run_shell_command(apache2ctl stop)",
  "run_shell_command(apache2ctl restart)",
  "run_shell_command(httpd -t)",
  "run_shell_command(httpd start)",
  "run_shell_command(httpd stop)",
  "run_shell_command(httpd restart)",
  "run_shell_command(mysql -u user -p database_name < script.sql)",
  "run_shell_command(psql -U user -d database_name -f script.sql)",
  "run_shell_command(sqlite3 database.db < script.sql)",
  "run_shell_command(mongo)",
  "run_shell_command(mongod)",
  "run_shell_command(redis-server)",
  "run_shell_command(redis-cli)",
  "run_shell_command(elasticsearch)",
  "run_shell_command(logstash)",
  "run_shell_command(kibana)",
  "run_shell_command(rabbitmq-server)",
  "run_shell_command(rabbitmqctl list_queues)",
  "run_shell_command(rabbitmqctl list_exchanges)",
  "run_shell_command(rabbitmqctl list_bindings)"
    ], 
    "exclude": [
      "write_file"
    ]
  },
  "context": {
    "fileFiltering": {
      "respectGitIgnore": true
    },
    "includeDirectories": [
      "src/components",
      "src/pages"
    ]
  },
  "privacy": {
    "usageStatisticsEnabled": false
  },
  "advanced": {
    "excludedEnvVars": [
      "PYTHONPATH",
      "MYSQL_ROOT_PASSWORD"
    ]
  },
  "security": {
    "auth": {
      "selectedType": "oauth-personal"
    }
  }
}
      "run_shell_command(pytest)",
      "run_shell_command(python -m venv venv)",
      "run_shell_command(pip list)",
      "run_shell_command(black .)",
      "run_shell_command(npm install)",
      "run_shell_command(npm test)",
      "run_shell_command(npm start)",
      "run_shell_command(npm run dev)",
      "run_shell_command(go test ./...)",
      "run_shell_command(go run .)",
      "run_shell_command(go build)",
      "run_shell_command(go fmt)",
      "run_shell_command(npm run eject)",
      "run_shell_command(composer install)",
      "run_shell_command(php -S localhost:8000)",
      "run_shell_command(composer update)",
      "run_shell_command(phpunit)",
      "run_shell_command(mysql -u root -p)",
      "run_shell_command(mysqldump -u root -p)",
      "run_shell_command(mysql -e \"CREATE DATABASE mydatabase;\")",
      "run_shell_command(mysql --version)",
      "run_shell_command(docker build -t myapp .)",
      "run_shell_command(docker run -p 3000:3000 myapp)",
      "run_shell_command(docker-compose up)",
      "run_shell_command(docker ps)",
      "run_shell_command(docker logs)",
      "run_shell_command(docker exec -it container_name sh)",
      "run_shell_command(kubectl get pods)",
      "run_shell_command(kubectl apply -f deployment.yaml)",
      "run_shell_command(kubectl logs pod_name)",
      "run_shell_command(kubectl exec -it pod_name -- sh)",
      "run_shell_command(git status)",
      "run_shell_command(git add .)",
      "run_shell_command(git commit -m \"Automated commit\")",
      "run_shell_command(git push origin main)",
      "run_shell_command(git pull origin main)",
      "run_shell_command(git diff)",
      "run_shell_command(git log --oneline)",
      "run_shell_command(terraform init)",
      "run_shell_command(terraform plan)",
      "run_shell_command(terraform apply)",
      "run_shell_command(terraform destroy)",
      "run_shell_command(ansible-playbook playbook.yml)",
      "run_shell_command(aws s3 ls)",
      "run_shell_command(aws ec2 describe-instances)",
      "run_shell_command(az group list)",
      "run_shell_command(gcloud compute instances list)",
      "run_shell_command(make build)",
      "run_shell_command(make test)",
      "run_shell_command(make clean)",
      "run_shell_command(cargo build)",
      "run_shell_command(cargo run)",
      "run_shell_command(cargo test)",
      "run_shell_command(rustc --version)",
      "run_shell_command(java -jar app.jar)",
      "run_shell_command(mvn clean install)",
      "run_shell_command(gradle build)",
      "run_shell_command(sbt run)",
      "run_shell_command(ruby script.rb)",
      "run_shell_command(bundle install)",
      "run_shell_command(rails server)",
      "run_shell_command(rails console)",
      "run_shell_command(webpack --mode development)",
      "run_shell_command(webpack --mode production)",
      "run_shell_command(eslint src/)",
      "run_shell_command(prettier --write src/)",
      "run_shell_command(yarn install)",
      "run_shell_command(yarn build)",
      "run_shell_command(yarn test)",
      "run_shell_command(systemctl status service_name)",
      "run_shell_command(journalctl -u service_name)",
      "run_shell_command(ps aux | grep process_name)",
      "run_shell_command(kill process_id)",
      "run_shell_command(netstat -tulpn)",
      "run_shell_command(ss -tulpn)",
      "run_shell_command(lsof -i :port)",
      "run_shell_command(tail -f /var/log/syslog)",
      "run_shell_command(find /path -name \"*.ext\" -type f)",
      "run_shell_command(grep -r \"pattern\" /path)",
      "run_shell_command(tar -czvf archive.tar.gz folder/)",
      "run_shell_command(unzip archive.zip)",
      "run_shell_command(wget url)",
      "run_shell_command(curl -X GET url)",
      "run_shell_command(crontab -l)",
      "run_shell_command(systemctl start service_name)",
      "run_shell_command(systemctl stop service_name)",
      "run_shell_command(systemctl restart service_name)",  
      "run_shell_command(rm -rf node_modules && npm install)",
      "run_shell_command(npm audit fix)",
  "run_shell_command(npm outdated)",
  "run_shell_command(npm update)",
  "run_shell_command(npx create-react-app my-app)",
  "run_shell_command(npx vue create my-project)",
  "run_shell_command(ng new my-angular-app)",
  "run_shell_command(dotnet new console -o MyApp)",
  "run_shell_command(dotnet run)",
  "run_shell_command(dotnet build)",
  "run_shell_command(dotnet test)",
  "run_shell_command(pip install package_name)",
  "run_shell_command(pip uninstall package_name)",
  "run_shell_command(pip freeze > requirements.txt)",
  "run_shell_command(conda create -n myenv python=3.9)",
  "run_shell_command(conda activate myenv)",
  "run_shell_command(conda install package_name)",
  "run_shell_command(virtualenv venv)",
  "run_shell_command(source venv/bin/activate)",
  "run_shell_command( deactivate)",
  "run_shell_command(flask run)",
  "run_shell_command(django-admin startproject mysite)",
  "run_shell_command(python manage.py runserver)",
  "run_shell_command(python manage.py makemigrations)",
  "run_shell_command(python manage.py migrate)",
  "run_shell_command(ruby -v)",
  "run_shell_command(gem install package_name)",
  "run_shell_command(rails new myapp)",
  "run_shell_command(rake db:migrate)",
  "run_shell_command(rake db:seed)",
  "run_shell_command(spring boot run)",
  "run_shell_command(mvn spring-boot:run)",
  "run_shell_command(gradle bootRun)",
  "run_shell_command(javac filename.java)",
  "run_shell_command(java classname)",
  "run_shell_command(jar -cvf myapp.jar *)",
  "run_shell_command(ant build)",
  "run_shell_command(ant clean)",
  "run_shell_command(ionic start myApp)",
  "run_shell_command(ionic serve)",
  "run_shell_command(ionic build)",
  "run_shell_command(cordova platform add android)",
  "run_shell_command(cordova build android)",
  "run_shell_command(react-native init MyApp)",
  "run_shell_command(react-native run-android)",
  "run_shell_command(react-native run-ios)",
  "run_shell_command(expo start)",
  "run_shell_command(expo build:android)",
  "run_shell_command(expo build:ios)",
  "run_shell_command(docker-compose down)",
  "run_shell_command(docker-compose build)",
  "run_shell_command(docker-compose logs)",
  "run_shell_command(docker images)",
  "run_shell_command(docker rmi image_name)",
  "run_shell_command(docker stop container_name)",
  "run_shell_command(docker rm container_name)",
  "run_shell_command(docker volume ls)",
  "run_shell_command(docker network ls)",
  "run_shell_command(kubectl delete pod pod_name)",
  "run_shell_command(kubectl scale deployment deployment_name --replicas=3)",
  "run_shell_command(kubectl port-forward pod_name 8080:80)",
  "run_shell_command(kubectl describe pod pod_name)",
  "run_shell_command(kubectl create -f file.yaml)",
  "run_shell_command(helm install release_name chart_name)",
  "run_shell_command(helm list)",
  "run_shell_command(helm uninstall release_name)",
  "run_shell_command(terraform validate)",
  "run_shell_command(terraform fmt)",
  "run_shell_command(terraform show)",
  "run_shell_command(terraform output)",
  "run_shell_command(ansible --version)",
  "run_shell_command(ansible-inventory --list)",
  "run_shell_command(aws configure)",
  "run_shell_command(aws sts get-caller-identity)",
  "run_shell_command(az login)",
  "run_shell_command(az account show)",
  "run_shell_command(gcloud auth login)",
  "run_shell_command(gcloud config list)",
  "run_shell_command(serverless deploy)",
  "run_shell_command(serverless remove)",
  "run_shell_command(serverless logs -f function_name)",
  "run_shell_command(pm2 start app.js)",
  "run_shell_command(pm2 list)",
  "run_shell_command(pm2 stop app_name)",
  "run_shell_command(pm2 restart app_name)",
  "run_shell_command(pm2 delete app_name)",
  "run_shell_command(nodemon app.js)",
  "run_shell_command(forever start app.js)",
  "run_shell_command(forever list)",
  "run_shell_command(forever stop app_name)",
  "run_shell_command(sudo systemctl enable service_name)",
  "run_shell_command(sudo systemctl disable service_name)",
  "run_shell_command(sudo journalctl -f -u service_name)",
  "run_shell_command(sudo ufw status)",
  "run_shell_command(sudo ufw allow port)",
  "run_shell_command(sudo ufw deny port)",
  "run_shell_command(crontab -e)",
  "run_shell_command(crontab -r)",
  "run_shell_command(at now + 5 minutes)",
  "run_shell_command(atq)",
  "run_shell_command(atrm job_number)",
  "run_shell_command(wget --mirror --convert-links --adjust-extension --page-requisites --no-parent url)",
  "run_shell_command(curl -X POST -H \"Content-Type: application/json\" -d '{\"key\":\"value\"}' url)",
  "run_shell_command(curl -O url)",
  "run_shell_command(rsync -av source/ destination/)",
  "run_shell_command(scp file user@host:/path)",
  "run_shell_command(ssh user@host)",
  "run_shell_command(ssh-keygen -t rsa -b 4096)",
  "run_shell_command(ssh-copy-id user@host)",
  "run_shell_command(telnet host port)",
  "run_shell_command(nc -zv host port)",
  "run_shell_command(dig domain.com)",
  "run_shell_command(nslookup domain.com)",
  "run_shell_command(traceroute domain.com)",
  "run_shell_command(ping -c 4 domain.com)",
  "run_shell_command(ifconfig)",
  "run_shell_command(ip addr show)",
  "run_shell_command(route -n)",
  "run_shell_command(iptables -L)",
  "run_shell_command(iptables -A INPUT -p tcp --dport port -j ACCEPT)",
  "run_shell_command(iptables -D INPUT -p tcp --dport port -j ACCEPT)",
  "run_shell_command(useradd username)",
  "run_shell_command(userdel username)",
  "run_shell_command(usermod -aG group username)",
  "run_shell_command(passwd username)",
  "run_shell_command(groups username)",
  "run_shell_command(id username)",
  "run_shell_command(chmod 755 filename)",
  "run_shell_command(chown user:group filename)",
  "run_shell_command(du -sh directory)",
  "run_shell_command(df -h)",
  "run_shell_command(free -h)",
  "run_shell_command(top)",
  "run_shell_command(htop)",
  "run_shell_command(vmstat 1)",
  "run_shell_command(iostat)",
  "run_shell_command(mpstat)",
  "run_shell_command(sar -u)",
  "run_shell_command(iotop)",
  "run_shell_command(nethogs)",
  "run_shell_command(nload)",
  "run_shell_command(tcpdump -i interface)",
  "run_shell_command(tshark -i interface)",
  "run_shell_command(wireshark)",
  "run_shell_command(nmap -sT target)",
  "run_shell_command(nmap -sU target)",
  "run_shell_command(nmap -O target)",
  "run_shell_command(nmap -A target)",
  "run_shell_command(netcat -l -p port)",
  "run_shell_command(netcat target port)",
  "run_shell_command(socat TCP-LISTEN:port,fork TCP:target:port)",
  "run_shell_command(socat UDP-LISTEN:port,fork UDP:target:port)",
  "run_shell_command(mount /dev/device /mnt/mountpoint)",
  "run_shell_command(umount /mnt/mountpoint)",
  "run_shell_command(fdisk -l)",
  "run_shell_command(lsblk)",
  "run_shell_command(lscpu)",
  "run_shell_command(lsmem)",
  "run_shell_command(lsusb)",
  "run_shell_command(lspci)",
  "run_shell_command(dmidecode)",
  "run_shell_command(hwinfo)",
  "run_shell_command(sensors)",
  "run_shell_command(lsmod)",
  "run_shell_command(modprobe module_name)",
  "run_shell_command(rmmod module_name)",
  "run_shell_command(dmesg)",
  "run_shell_command(journalctl --since today)",
  "run_shell_command(journalctl --since \"2023-01-01\" --until \"2023-01-02\")",
  "run_shell_command(logrotate /etc/logrotate.conf)",
  "run_shell_command(logger \"Test message\")",
  "run_shell_command(logger -p local0.notice \"Test message\")",
  "run_shell_command(syslog-ng)",
  "run_shell_command(rsyslogd)",
  "run_shell_command(cron)",
  "run_shell_command(anacron)",
  "run_shell_command(atd)",
  "run_shell_command(nginx -t)",
  "run_shell_command(apache2ctl configtest)",
  "run_shell_command(apache2ctl start)",
  "run_shell_command(apache2ctl stop)",
  "run_shell_command(apache2ctl restart)",
  "run_shell_command(httpd -t)",
  "run_shell_command(httpd start)",
  "run_shell_command(httpd stop)",
  "run_shell_command(httpd restart)",
  "run_shell_command(mysql -u user -p database_name < script.sql)",
  "run_shell_command(psql -U user -d database_name -f script.sql)",
  "run_shell_command(sqlite3 database.db < script.sql)",
  "run_shell_command(mongo)",
  "run_shell_command(mongod)",
  "run_shell_command(redis-server)",
  "run_shell_command(redis-cli)",
  "run_shell_command(elasticsearch)",
  "run_shell_command(logstash)",
  "run_shell_command(kibana)",
  "run_shell_command(rabbitmq-server)",
  "run_shell_command(rabbitmqctl list_queues)",
  "run_shell_command(rabbitmqctl list_exchanges)",
  "run_shell_command(rabbitmqctl list_bindings)"
    ], 
    "exclude": [
      "write_file"
    ]
  },
  "context": {
    "fileFiltering": {
      "respectGitIgnore": true
    },
    "includeDirectories": [
      "src/components",
      "src/pages"
    ]
  },
  "privacy": {
    "usageStatisticsEnabled": false
  },
  "advanced": {
    "excludedEnvVars": [
      "PYTHONPATH",
      "MYSQL_ROOT_PASSWORD"
    ]
  },
  "security": {
    "auth": {
      "selectedType": "oauth-personal"
    }
  }
}
